{"version":3,"sources":["configureAppStore.js","sagas/example-1.js","sagas/example-2.js","sagas/example-3.js","sagas/example-4.js","examples-config.js","components/block/block.js","components/action-history/action-history.js","components/code/code.js","components/effects-history/effects-history.utils.js","components/effects-history/__item/effects-history__item.js","components/effects-history/effects-history.js","components/effects-visualizer/__row/effects-visualizer__row.js","components/effects-visualizer/effects-visualizer.js","components/app/app.js","utils/tree-utils/cloneTree.js","utils/tree-utils/three-node-utils.js","utils/tree-utils/append-node.js","components/monitor-initializer/monitor-initializer.reducer.js","components/monitor-initializer/monitor-initializer.js","index.js"],"names":["sagaMonitor","sagaMiddleware","createSagaMiddleware","rootReducer","stub","createSlice","name","initialState","reducers","reducer","actions","rootSaga","put","type","takeEvery","functions","call","arg","callRes","takeLatest","chain1","chain2","fetchAll","fetchResource","fork","spawn","resource","examplesConfig","slug","code","example1RootSaga","example2RootSaga","example3RootSaga","example4RootSaga","Block","id","mod","payload","disabled","fullInfo","modificator","additionalText","String","fn","chooseModData","handleClick","useCallback","console","log","className","title","onClick","ActionHistory","actionHistory","map","i","Code","useEffect","Prism","highlightAll","prettifyType","EffectsHistoryItem","isCurrent","index","content","EffectsHistory","history","onItemClick","effectsMap","currentIndex","effectId","effect","EffectsVisualizerRow","effectsTree","resolvedEffectsMap","node","key","children","parentEffectId","isResolved","Boolean","block","YAML","stringify","EffectsVisualizer","rootSagaStarted","length","App","effectsState","onHistoryItemClick","handleButtonClick","currentHistoryItemIndex","href","cloneTree","tree","JSON","parse","treeNodeUtils","TreeNodeUtils","childrenField","keyField","appendNode","parentId","newEffectsTree","findNodes","parentNode","effectKey","push","monitorReducer","state","action","Error","queueExecuting","effectsQueueFastBuffer","historyFastBuffer","MonitorInitializer","dispatch","useDispatch","useState","effectsQueue","changeEffectQueue","changeEffectHistory","useReducer","monitorReducerDispatch","historyEffectsState","changeHistoryEffectsState","changeCurrentHistoryItemIndex","updateEffectsQueue","newQueue","shouldUpdateQueue","handleHistoryItemClick","newHistoryState","setTimeout","effectToPerform","slice","effectTriggered","actionDispatched","effectResolved","run","store","configureStore","middleware","getDefaultMiddleware","ReactDOM","render","basename","path","from","to","document","getElementById"],"mappings":"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","file":"static/js/main.b76ebd8c.chunk.js","sourcesContent":["import { configureStore, getDefaultMiddleware } from '@reduxjs/toolkit';\nimport createSagaMiddleware from 'redux-saga';\nimport { createSlice } from '@reduxjs/toolkit';\n\nexport const sagaMonitor = {};\n\nexport const sagaMiddleware = createSagaMiddleware({ sagaMonitor });\n\nconst rootReducer = {\n  stub: createSlice({\n      name: 'stub',\n      initialState: {},\n      reducers: {}\n  }).reducer,\n};\n\nexport const configureAppStore = () => {\n  const store = configureStore({\n    reducer: rootReducer,\n    middleware: [sagaMiddleware, ...getDefaultMiddleware()],\n  });\n\n  return store;\n};\n","import {\n    put,\n    takeEvery,\n} from 'redux-saga/effects'\n\nfunction* actions() {\n    yield put({ type: 'PUT_ACTION' });\n};\n\nexport function* rootSaga() {\n    yield takeEvery('Click', actions);\n};\n\nexport const code = \n`   function* actions() {\n        yield put({ type: 'PUT_ACTION' });\n    };\n\n    export function* rootSaga() {\n        yield takeEvery('Click', actions);\n    };\n`","import {\n    call,\n    takeLatest\n} from 'redux-saga/effects';\n\nfunction* functions() {\n    yield (arg => arg)('fn_arg');\n    const callRes = yield call(arg => arg , 'call_fn_arg');\n    yield callRes;\n};\n\nexport function* rootSaga() {\n    yield takeLatest('Click', functions);\n};\n\nexport const code = \n`   function* functions() {\n        yield (arg => arg)('fn_arg');\n        const callRes = yield call(arg => arg , 'call_fn_arg');\n        yield callRes;\n    };\n\n    export function* rootSaga() {\n        yield takeLatest('Click', functions);\n    };\n`","import {\n    takeEvery,\n    put\n} from 'redux-saga/effects';\n\nfunction* chain1() {\n    yield put({ type: 'CHAIN_1' })\n};\n\nfunction* chain2() {\n    yield put({ type: 'CHAIN_2' })\n};\n\nexport function* rootSaga() {\n    yield takeEvery('Click', chain1);\n    yield takeEvery('CHAIN_1', chain2);\n};\n\nexport const code = \n`   function* chain1() {\n        yield put({ type: 'CHAIN_1' })\n    };\n\n    function* chain2() {\n        yield put({ type: 'CHAIN_2' })\n    };\n\n    export function* rootSaga() {\n        yield takeEvery('Click', chain1);\n        yield takeEvery('CHAIN_1', chain2);\n    };\n`","import {\n    call,\n    spawn,\n    put,\n    fork\n} from 'redux-saga/effects';\n\nfunction* fetchAll() {\n    yield fork(fetchResource, 'users');\n    yield spawn(fetchResource, 'comments');\n}\n  \nfunction* fetchResource(resource) {\n    yield put({ type: resource });\n}\n  \nexport function* rootSaga() {\n    yield call(fetchAll);\n}\n\nexport const code = \n`   function* fetchAll() {\n        yield fork(fetchResource, 'users');\n        yield spawn(fetchResource, 'comments');\n    }\n    \n    function* fetchResource(resource) {\n        yield put({ type: resource });\n    }\n    \n    export function* rootSaga() {\n        yield call(fetchAll);\n    }\n`","import { rootSaga as example1RootSaga } from './sagas/example-1';\nimport { code as example1Code } from './sagas/example-1';\n\nimport { rootSaga as example2RootSaga } from './sagas/example-2';\nimport { code as example2Code } from './sagas/example-2';\n\nimport { rootSaga as example3RootSaga } from './sagas/example-3';\nimport { code as example3Code } from './sagas/example-3';\n\nimport { rootSaga as example4RootSaga } from './sagas/example-4';\nimport { code as example4Code } from './sagas/example-4';\n\nexport const examplesConfig = [\n    {\n        slug: 'example-1',\n        name: 'Basic example',\n        code: example1Code,\n        rootSaga: example1RootSaga,\n    },\n    {\n        slug: 'example-2',\n        name: 'Functions',\n        code: example2Code,\n        rootSaga: example2RootSaga,\n    },\n    {\n        slug: 'example-3',\n        name: 'Chaining sagas',\n        code: example3Code,\n        rootSaga: example3RootSaga,\n    },\n    {\n        slug: 'example-4',\n        name: 'Fork vs Spawn',\n        code: example4Code,\n        rootSaga: example4RootSaga,\n    }\n]","import { useCallback } from 'react';\nimport './block.css'\n\nconst chooseModData = (mod, payload) => {\n    switch (mod) {\n        case 'FORK':\n            return {\n                modificator: 'fork',\n                additionalText: String(payload.fn)\n            }\n        case 'CALL':\n            return {\n                modificator: 'call',\n                additionalText: String(payload.fn)\n            }\n        case 'TAKE':\n            return {\n                modificator: 'take'\n            };\n        default:\n            return {\n                modificator: ''\n            };\n    }\n}\n\nexport const Block = ({ id, name, mod, payload, disabled, fullInfo }) => {\n    const { modificator, additionalText} = chooseModData(mod, payload);\n\n    const handleClick = useCallback(() => {\n        if (!fullInfo) return;\n\n        console.log(fullInfo);\n    }, [fullInfo]);\n\n    return (\n        <div\n            className={`block ${modificator ? `block_${modificator}` : ''} ${disabled ? `block_disabled` : ''}`}\n            title={fullInfo}\n            onClick={handleClick}\n        >\n            <div className={'block__main-text'}>{id ? `${id}: ${name}` : name}</div>\n            <div className={'block__add-text'}>{additionalText}</div>\n        </div>\n    )\n}","import { Block } from '../block/block';\n\nimport './action-history.css'\n\nexport const ActionHistory = ({ actionHistory }) => {\n    return (\n        <div className='action-history'>\n            <h3>Actions Dispatched</h3>\n            <div className={'action-history__items'}>\n                {actionHistory.map(({ type }, i) => (\n                <Block\n                    key={`${type}_${i}`}\n                    mod={type}\n                    name={type}\n                />\n                ))}\n            </div>\n        </div>\n    )\n}","import React, { useEffect } from 'react';\nimport Prism from 'prismjs';\n\nimport 'prismjs/themes/prism.css';\n\nexport const Code = ({ code }) => {\n  useEffect(() => {\n    Prism.highlightAll();\n  }, []);\n\n  return (\n    <div>\n      <pre>\n        <code className={`language-javascript`}>{code}</code>\n      </pre>\n    </div>\n  );\n}","export const prettifyType = (type) => {\n    switch (type) {\n        case 'effectTriggered':\n            return `🔥`;\n        case 'effectResolved':\n            return `🏁`;\n        case 'actionDispatched':\n            return `🎬`;\n        default:\n            return '';\n    }\n}","import { useCallback } from 'react';\n\nimport { prettifyType } from '../effects-history.utils';\n\nimport './effects-history__item.css'\n\nexport const EffectsHistoryItem = ({ type, isCurrent, index, content, onClick }) => {\n    const handleClick = useCallback(() => {\n        onClick(index)\n    }, [index, onClick])\n\n    return (\n        <button\n            className={`effects-history__item ${isCurrent ? 'effects-history__item_current' : ''}`}\n            onClick={handleClick}\n        >\n            <div className={'effects-history__item-prefix'}>\n                <div className={'effects-history__item-icon'}>{prettifyType(type)}</div>\n                <div className={'effects-history__item-type'}>{type}</div>\n            </div>\n            <div className={'effects-history__item-content'}>\n                {content}\n            </div>\n        </button>\n    )\n}","import { EffectsHistoryItem } from './__item/effects-history__item';\n\nimport './effects-history.css'\n\nexport const EffectsHistory = ({ history, onItemClick, effectsMap, currentIndex }) => {\n    return (\n        <div className={'effects-history'}>\n            <h3>History</h3>\n            <div className={'effects-history__items'}>\n                {history.map(({ type, effectId }, i) => {\n                    const effect = effectsMap[effectId];\n                    const isCurrent = currentIndex === i;\n\n                    const content = effect && effect.effect.type\n                        ? `${effectId}: ${effect.effect.type}`\n                        : effectId || ''\n\n                    return (\n                        <EffectsHistoryItem\n                            key={`${type}${effectId}${i}`}\n                            type={type}\n                            isCurrent={isCurrent}\n                            index={i}\n                            content={content}\n                            onClick={onItemClick}\n                        />\n                    )\n                })}\n            </div>\n        </div>\n    );\n}","import YAML from 'json-to-pretty-yaml';\n\nimport { Block } from '../../block/block';\n\nimport './effects-visualizer__row.css';\n\nexport const EffectsVisualizerRow = ({ effectsTree, effectsMap, resolvedEffectsMap }) => {\n    return effectsTree.map(node => {\n        const { key, children } = node;\n        const { effectId, parentEffectId, effect } = effectsMap[key];\n        const isResolved = Boolean(resolvedEffectsMap[key]);\n\n        const block = (\n            <Block\n                key={effectId}\n                disabled={isResolved}\n                parentEffectId={parentEffectId}\n                id={effectId}\n                name={effect.type || effect}\n                mod={effect.type}\n                payload={effect.payload}\n                fullInfo={YAML.stringify(effectsMap[key])}\n            />\n        )\n\n        return children\n            ? (\n                <div key={effectId}>\n                    {block}\n                    <div className={'effects-visualizer__row'}>\n                        <EffectsVisualizerRow\n                            effectsTree={children}\n                            effectsMap={effectsMap}\n                            resolvedEffectsMap={resolvedEffectsMap}\n                        />\n                    </div>\n                </div>\n            )\n            : block;\n    });\n}\n","import { EffectsVisualizerRow } from './__row/effects-visualizer__row';\n\nimport './effects-visualizer.css';\n\nexport const EffectsVisualizer = ({\n    rootSagaStarted,\n    effectsMap,\n    effectsTree,\n    resolvedEffectsMap\n}) => {\n    return (\n        <div className={'effects-visualizer'}>\n            <h3>Effects</h3>\n            <div>\n                {rootSagaStarted && <h4 className={'effects-visualizer__success-subtitle'}>✔️ Root Saga Started</h4>}\n                \n                {Boolean(effectsTree.length) && \n                    <EffectsVisualizerRow\n                        effectsTree={effectsTree}\n                        effectsMap={effectsMap}\n                        resolvedEffectsMap={resolvedEffectsMap}\n                    />}\n            </div>\n        </div>\n    )\n};\n","import { useCallback } from 'react';\n\nimport { ActionHistory } from '../action-history/action-history';\nimport { Code } from '../code/code';\nimport { EffectsHistory } from '../effects-history/effects-history';\nimport { EffectsVisualizer } from '../effects-visualizer/effects-visualizer';\nimport { examplesConfig } from '../../examples-config';\n\nimport './app.css'\n\nexport const App = ({\n    effectsState,\n    history,\n    onHistoryItemClick,\n    effectsMap,\n    handleButtonClick,\n    currentHistoryItemIndex,\n    code\n}) => {\n    const { rootSagaStarted, effectsTree, actionHistory, resolvedEffectsMap } = effectsState;\n\n    const handleClick = useCallback(() => {\n        handleButtonClick()\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n    }, []);\n\n    return (\n        <div className={'app'}>\n            <nav>\n                <ul>\n                    {examplesConfig.map(({ slug, name } ) => (\n                    <li key={slug}>\n                        <a href={`/${slug}`}>{name}</a>\n                    </li>\n                    ))}\n                </ul>\n            </nav>\n\n            {code && <Code code={code} />}\n\n            <button className={'app__action-button'} onClick={handleClick}>Dispatch Action</button>\n\n            <div className={'app__effects'}>\n                <EffectsVisualizer\n                    rootSagaStarted={rootSagaStarted}\n                    effectsMap={effectsMap}\n                    effectsTree={effectsTree}\n                    resolvedEffectsMap={resolvedEffectsMap}\n                />\n                <EffectsHistory\n                    history={history}\n                    onItemClick={onHistoryItemClick}\n                    effectsMap={effectsMap}\n                    currentIndex={currentHistoryItemIndex}\n                />\n                <ActionHistory actionHistory={actionHistory} />\n            </div>\n\n        </div>\n    );\n};\n","export const cloneTree = (tree) => {\n    return JSON.parse(JSON.stringify(tree))\n}","import TreeNodeUtils from 'tree-node-utils';\n\nconst treeNodeUtilsConfig = {\n  childrenField: 'children',\n  keyField: 'key',\n};\n\nexport const treeNodeUtils = new TreeNodeUtils(treeNodeUtilsConfig);","import { cloneTree } from './cloneTree';\nimport { treeNodeUtils } from './three-node-utils';\n\nexport const appendNode = (tree, id, parentId) => {\n    const newEffectsTree = cloneTree(tree);\n    const [parentNode] = treeNodeUtils.findNodes(newEffectsTree, node => node.key === String(parentId));\n    const effectKey = String(id);\n    \n    if (!parentNode) {\n        newEffectsTree.push({ key: effectKey })\n    } else if (parentNode.children) {\n        parentNode.children = [\n            ...parentNode.children,\n            { key: effectKey }\n        ]\n    } else {\n        parentNode.children = [{ key: effectKey }]\n    }\n\n    return newEffectsTree;\n}","import { appendNode } from '../../utils/tree-utils/append-node';\n\nexport const monitorReducer = (state, action) => {\n    switch (action.type) {\n        case 'rootSagaStarted':\n            return {\n                ...state,\n                rootSagaStarted: true\n            };\n        case 'effectTriggered':\n            const { effectId, parentEffectId } = action.payload;\n\n            return {\n                ...state,\n                effectsTree: appendNode(state.effectsTree, effectId, parentEffectId),\n                effectsMap: {\n                    ...state.effectsMap,\n                    [String(effectId)]: action.payload\n                }\n            };\n        case 'actionDispatched':\n            return {\n                ...state,\n                actionHistory: [...state.actionHistory, action.payload]\n            };\n        case 'effectResolved':\n            return {\n                ...state,\n                resolvedEffectsMap: {\n                    ...state.resolvedEffectsMap,\n                    [action.payload]: true\n                }\n            };\n        default:\n            throw new Error();\n    }\n}","import { useCallback, useEffect, useReducer, useState } from 'react';\nimport { useDispatch } from 'react-redux';\n\nimport { App } from '../app/app';\nimport { cloneTree } from '../../utils/tree-utils/cloneTree';\n\nimport { monitorReducer } from './monitor-initializer.reducer';\n\nlet queueExecuting = false;\nlet effectsQueueFastBuffer = [];\nlet historyFastBuffer = [];\n\nexport const MonitorInitializer = ({ sagaMonitor, sagaMiddleware, rootSaga, code }) => {\n    const dispatch = useDispatch();\n\n    const [effectsQueue, changeEffectQueue] = useState([]);\n    const [history, changeEffectHistory] = useState([]);\n    const [effectsState, monitorReducerDispatch] = useReducer(monitorReducer, {\n        rootSagaStarted: false,\n        effectsMap: {},\n        actionHistory: [],\n        resolvedEffectsMap: {},\n        effectsTree: []\n    });\n    const [historyEffectsState, changeHistoryEffectsState] = useState(null);\n    const [currentHistoryItemIndex, changeCurrentHistoryItemIndex] = useState(null);\n\n    const updateEffectsQueue = useCallback((newQueue, shouldUpdateQueue) => {\n        effectsQueueFastBuffer = newQueue;\n\n        if (shouldUpdateQueue) {\n            changeEffectQueue(effectsQueueFastBuffer);\n        }\n    }, []);\n\n    const handleHistoryItemClick = useCallback((index) => {\n        const newHistoryState = history[index + 1] ? history[index + 1].effectsState : null;\n\n        changeHistoryEffectsState(newHistoryState);\n        changeCurrentHistoryItemIndex(index);\n    }, [history]);\n\n    const handleButtonClick = useCallback(() => {\n        changeHistoryEffectsState(null);\n        changeCurrentHistoryItemIndex(null);\n        dispatch({ type: 'Click' });\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n    }, []);\n\n    useEffect(() => {\n        if (!effectsQueue.length) {\n            queueExecuting = false;\n            return;\n        };\n\n        queueExecuting = true;\n        setTimeout(() => {\n            const effectToPerform = effectsQueue[effectsQueue.length - 1];\n\n            monitorReducerDispatch(effectToPerform);\n            updateEffectsQueue(effectsQueueFastBuffer.slice(0, -1), true);\n\n            historyFastBuffer = [...historyFastBuffer, {\n                type: effectToPerform.type,\n                effectId: typeof effectToPerform.payload === 'object'\n                    ? effectToPerform.payload.effectId\n                    : effectToPerform.payload,\n                effectsState: {\n                    ...effectsState,\n                    effectsTree: cloneTree(effectsState.effectsTree)\n                }\n            }];\n            changeEffectHistory(historyFastBuffer);\n        }, 500)\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n    }, [effectsQueue]);\n\n    useEffect(() => {\n        sagaMonitor.rootSagaStarted = (effect) => {\n            updateEffectsQueue([{ type: 'rootSagaStarted', payload: effect.effectId }, ...effectsQueueFastBuffer], !queueExecuting);\n        };\n        sagaMonitor.effectTriggered = (effect) => {\n            updateEffectsQueue([{ type: 'effectTriggered', payload: effect }, ...effectsQueueFastBuffer], !queueExecuting);\n        }\n        sagaMonitor.actionDispatched = (action) => {\n            updateEffectsQueue([{ type: 'actionDispatched', payload: action }, ...effectsQueueFastBuffer], !queueExecuting);\n        }\n        sagaMonitor.effectResolved = (effectId) => {\n            updateEffectsQueue([{ type: 'effectResolved', payload: effectId }, ...effectsQueueFastBuffer], !queueExecuting);\n        };\n\n        sagaMiddleware.run(rootSaga);\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n    }, []);\n\n    return (\n        <App\n            effectsState={historyEffectsState === null ? effectsState : historyEffectsState}\n            effectsMap={effectsState.effectsMap}\n            history={history}\n            onHistoryItemClick={handleHistoryItemClick}\n            handleButtonClick={handleButtonClick}\n            currentHistoryItemIndex={currentHistoryItemIndex}\n            code={code}\n        />\n    )\n};\n","import { Provider } from 'react-redux';\nimport React from 'react';\nimport ReactDOM from 'react-dom';\nimport {\n  BrowserRouter as Router,\n  Switch,\n  Redirect,\n  Route,\n} from \"react-router-dom\";\n\nimport { configureAppStore, sagaMiddleware, sagaMonitor } from './configureAppStore';\nimport { examplesConfig } from './examples-config'\nimport { MonitorInitializer } from './components/monitor-initializer/monitor-initializer';\n\nimport './index.css';\n\nconst store = configureAppStore();\n\nReactDOM.render(\n  <Provider store={store}>\n    <Router basename={'/saga-showcase'}>\n      <Switch>\n        {examplesConfig.map(({ slug, code, rootSaga } ) => (\n          <Route path={`/${slug}`} key={slug}>\n            <MonitorInitializer sagaMonitor={sagaMonitor} sagaMiddleware={sagaMiddleware} rootSaga={rootSaga} code={code} />\n          </Route>\n        ))}\n        <Redirect from=\"/\" to={`/${examplesConfig[0].slug}`} />\n      </Switch>\n    </Router>\n  </Provider>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}